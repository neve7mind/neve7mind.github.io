
    
    
    
    
    
    
    
    
    
    
    
    [{"authors":null,"categories":null,"content":"Мурашов И.В. - студент Факультета физико-математических и естественных наук Российского университета дружбы народов. Чем только в жизни не занимался, прибился к комьюнити программистов, пока дрейфую здесь и мне нравится.\n","date":1710460800,"expirydate":-62135596800,"kind":"term","lang":"ru","lastmod":1710460800,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"","publishdate":"0001-01-01T00:00:00Z","relpermalink":"","section":"authors","summary":"Мурашов И.В. - студент Факультета физико-математических и естественных наук Российского университета дружбы народов. Чем только в жизни не занимался, прибился к комьюнити программистов, пока дрейфую здесь и мне нравится.","tags":null,"title":"Мурашов И.В.","type":"authors"},{"authors":[],"categories":null,"content":" Click on the Slides button above to view the built-in slides feature. Slides can be added in a few ways:\nCreate slides using Hugo Blox Builder’s Slides feature and link using slides parameter in the front matter of the talk file Upload an existing slide deck to static/ and link using url_slides parameter in the front matter of the talk file Embed your slides (e.g. Google Slides) or presentation video on this page using shortcodes. Further event details, including page elements such as image galleries, can be added to the body of this page.\n","date":1906549200,"expirydate":-62135596800,"kind":"page","lang":"ru","lastmod":1906549200,"objectID":"a8edef490afe42206247b6ac05657af0","permalink":"https://neve7mind.github.io/ru/talk/example-talk/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/ru/talk/example-talk/","section":"event","summary":"An example talk using Hugo Blox Builder's Markdown slides feature.","tags":[],"title":"Example Talk","type":"event"},{"authors":null,"categories":null,"content":"Цель работы Выполнение контрольных заданий внешнего курса “Основы Кибербезопасности”.\nКак работает интернет: базовые сетевые протоколы UDP - протокол сетевого уровня TCP - протокол транспортного уровня HTTPS - протокол прикладного уровня IP - протокол сетевого уровня, поэтому ответ HTTPS.\nРанее было упомянуто, что протокол TCP - transmission control protocol - работает на транспортном уровне.\nВ адресе типа IPv4 не может быть чисел больше 255, поэтому первые два варианта не подходят.\nDNS-сервер, Domain name server — приложение, предназначенное для ответов на DNS-запросы по соответствующему протоколу Обязательное условие – Сопоставление сервером доменных имен доменного имени с IP-адресом называется разрешением имени и адреса.\nРаспределение протоколов в модели TCP/IP:\nПрикладной уровень (Application Layer): HTTP, RTSP, FTP, DNS.\nТранспортный уровень (Transport Layer): TCP, UDP, SCTP, DCCP.\nСетевой (Межсетевой) уровень (Network Layer): IP.\nУровень сетевого доступа (Канальный) (Link Layer): Ethernet, IEEE 802.11, WLAN, SLIP, Token Ring, ATM и MPLS.\nПротокол http передает не зашифрованные данные, а протокол https уже будет передавать зашифрованные данные.\nhttps передает зашифрованные данные, одна из фаз - передача данных, другая должна быть рукопожатием.\nTLS определяется и клиентом, и сервером, чтобы было возможно подключиться.\nОтвет на изобрадении, остальные варианты в протоколе предусмотрены.\nПерсонализация сети Куки точно не хранят пароли и IP-адреса, а id ceccии и идентификатор хранят.\nКонечно же, куки не делают соединение более надежным.\nОтвет на изображении.\nСессионные куки хранятся в течение сессии, то есть пока используется веб-сайт.\nНеобходимо три узла - входной, промежуточный и выходной.\nБраузер TOR. Анонимизация IP-адрес не должен быть известен охранному и промежуточному узлам.\nОтправитель генерирует общий секретный ключ со узлами, через которые идет передача, то есть со всеми.\nДля получаения пакетов не нужно использовать TOR. TOR — это технология, которая позволяет с некоторым успехом скрыть личность человека в интернете.\n{#fig:017 width=70%}\nБеспроводные сети Wi-fi Действительно, это определение Wi-Fi.\nДля целей работы в Интернете Wi-Fi обычно располагается как канальный уровень (эквивалентный физическому и канальному уровням модели OSI) ниже интернет-уровня интернет-протокола. Это означает, что узлы имеют связанный интернет-адрес, и при подходящем подключении это обеспечивает полный доступ в Интернет.\nWEP (Wired Equivalent Privacy) – устаревший и небезопасный метод проверки подлинности. Это первый и не очень удачный метод защиты. Злоумышленники без проблем получают доступ к беспроводным сетям, которые защищены с помощью WEP, был заменен остальными представленными.\nНужно аутентифицировать устройства и позже передаются зашифрованные данные.\nВ целом, понятно по названию, что WPA2 Personal для личного использования, то есть для домашней сети, enterprise - для предпиятий.\nШифрование диска Шифрование диска - технология защиты информации, которая переводит данные на диске в нечитаемый код. Само собой можно зашифровать загрузочный сектор диска.\nШифрование диска основано на симметричном шифровании.\nОтмечены программы, с помощью которых можно зашифровать жетский диск.\nПароли Стойкий пароль - тот, который тяжлее подобрать, он должен быть со спец. символами и длинный.\nВсе варианты, кроме менеджера паролей, совершенно не надежные.\nКапча нужна для проверки на то, что за экраном “не робот”.\nОпасно хранить пароли в открытом виде, поэтому хранят их хэши.\nСоль не поможет.\nВсе приведенные меры защищают от утечек данных.\nФишинг Фишинговые ссылки очень похожи на ссылки известных сервисов, но с некоторыми отличиями.\nДа, может, например, если пользователя со знакомым адресом взломали.\nВирусы. Примеры Ответ дан в соответствии с определением.\nТроян маскируется под обычную программу.\nБезопасность мессенджеров При установке первого сообщения отправителем формируется ключ шифрования.\nСуть сквозного шифрования состоит в том, что сообзения передаются по узлам связи в зашифрованном виде.\nИ в конце хотелось бы напомнить, что весь проект можно будет лицезреть в самое ближайшее время ЗДЕСЬ.\n","date":1747440000,"expirydate":-62135596800,"kind":"page","lang":"ru","lastmod":1747440000,"objectID":"1662b7ed5335e63a6f1d7719e8c392ba","permalink":"https://neve7mind.github.io/ru/project/project2_infosec_course/","publishdate":"2025-05-17T00:00:00Z","relpermalink":"/ru/project/project2_infosec_course/","section":"project","summary":"В данном проекте я опишу выполнение курса \"Основы кибербезопасности\" на платформе Stepik","tags":["Deep Learning"],"title":"Внешний курс. Основы Кибербезопасности","type":"project"},{"authors":null,"categories":null,"content":"Цель проекта Написать компьютерную программу, содержащую\nОписание структуры, содержащей поля типа string, int, double; Набор функций для работы со списком на базе этой структуры: Добавление элемента в начало списка; Добавление элемента в конец списка; Добавление элемента в список после заданного элемента; Добавление элемента в список перед заданным элементом; Удаление из списка элемента с заданным именем; Вывод содержания списка на экран; Функцию main, содержащую сценарий работы со списком, использующий разработанный инструментарий. Превью проекта В данном проекте мной был создан односвязный список, каждый узел которого хранит в себе данные определённого человека: имя, рост и вес. Само собой был реализован набор функций, указанных в цели проекта.\nВесь проект можно будет лицезреть в самое ближайшее время ЗДЕСЬ.\nКак же всё-таки мне это удалось? Объявляем структуру узла, содержащую в себе 3 поля (string, int, double) и ссылку на следующий элемент. struct Human { string name; int growth; double weight; Human* next; }; Реализуем функцию добавления элемента в начало списка. Передаём ссылку на указатель первого элемента и поля нашей структуры (далее «базовые параметры»). Создаём новый объект типа Human, его адрес присваиваем переменной (newNode) Далее “кладём” в функцию базовые параметры, передаваемые в функции. Устанавливаем ссылку нового узла на ‘голову’ списка (pNode) и устанавливаем новый узел как ‘голову’ списка. void AddFirst(Human* \u0026amp;pNode, string name, int growth, double weight) { Human* newNode = new Human; newNode-\u0026gt;name = name; newNode-\u0026gt;growth = growth; newNode-\u0026gt;weight = weight; newNode-\u0026gt;next = pNode; pNode=newNode; } Реализуем функцию добавления элемента в конец списка. Передаём ссылку на указатель первого элемента и базовые параметры. Создаём новый объект типа Human, его адрес присваиваем переменной (newNode). Далее “кладём” в функцию базовые параметры и устанавливаем ссылку нового узла на ‘голову’ списка (pNode). Если у нас пустой список, то по сути мы создаём 1ый элемент. Else мы ищем последний элемент, после чего кладем в tmp адрес последнего элемента списка. void AddLast(Human* \u0026amp;pNode, string name, int growth, double weight) { Human* newNode = new Human; newNode-\u0026gt;name = name; newNode-\u0026gt;growth = growth; newNode-\u0026gt;weight = weight; newNode-\u0026gt;next = pNode; if (pNode == nullptr) { newNode-\u0026gt;next = nullptr; pNode = newNode; } else { Human* tmp = pNode; while (tmp-\u0026gt;next != nullptr) tmp = tmp-\u0026gt;next; newNode-\u0026gt;next = nullptr; tmp-\u0026gt;next=newNode; } } Реализуем функцию добавления элемента после заданного. Передаём указатель на первый элемент для создания копии внешнего объекта (pNode), строку, по которой будет происходить поиск узла и базовые параметры. Если у нас пустой список, то выводим сообщение об этом. Ищем нужный нам элемент, т.е. устанавливаем начало списка и движемся по списку. Если дошли до последнего элемента и не нашли нужный, выводим соответствующее сообщение. void AddAfter (Human* pNode, string Node, string name, int growth, double weight) { if (pNode == nullptr) { cout \u0026lt;\u0026lt; \u0026#34;This list is empty\\n\u0026#34;; return; } Human* tmp = pNode; while (tmp-\u0026gt;next != nullptr and tmp-\u0026gt;name != Node) tmp = tmp-\u0026gt;next; if (tmp-\u0026gt;next == nullptr and tmp-\u0026gt;name != Node) { cout \u0026lt;\u0026lt; \u0026#34;No element in the list\\n\u0026#34;; return; } Human* newNode = new Human; newNode-\u0026gt;name = name; newNode-\u0026gt;growth = growth; newNode-\u0026gt;weight = weight; newNode-\u0026gt;next = pNode-\u0026gt;next; pNode-\u0026gt;next = newNode; } Реализуем функцию добавления элемента перед заданным. Передаём указатель на первый элемент для создания копии внешнего объекта (pNode), строку, по которой будет происходить поиск узла и базовые параметры. Если у нас пустой список, то выводим сообщение об этом. Если первый же элемент является искомым, то вызываем функцию AddFirst. Создаём переменные, хранящие ссылки на предыдущий (prev) и последующий (tmp) элементы. Далее цикл для поиска нужного узла (Node). Если дошли до последнего элемента и не нашли нужный, выводим соответствующее сообщение. Если нашли, выполняем стандартные действия, заполняя новый узел и устанавливаем поле next на tmp, а поле next у prev устанавливаем на новый созданный узел. void AddBefore(Human* pNode, string Node, string name, int growth, double weight) { if (pNode == nullptr) { cout \u0026lt;\u0026lt; \u0026#34;This list is empty\\n\u0026#34;; return; } if (pNode-\u0026gt;name == Node) { AddFirst(pNode, name, growth, weight); return; } Human *prev = pNode, *tmp = pNode-\u0026gt;next; while (tmp-\u0026gt;next != nullptr and tmp-\u0026gt;name != Node) { tmp = tmp-\u0026gt;next; prev = prev-\u0026gt;next; } if (tmp-\u0026gt;next == nullptr and tmp-\u0026gt;name != Node) { cout \u0026lt;\u0026lt; \u0026#34;No element in the list\\n\u0026#34;; return; } Human* newNode = new Human; newNode-\u0026gt;name = name; newNode-\u0026gt;growth = growth; newNode-\u0026gt;weight = weight; newNode-\u0026gt;next = tmp; prev-\u0026gt;next = newNode; } Реализуем функцию удаления узла по имени (name). Передаём ссылку на указатель первого элемента и строку, по которой будет происходить поиск узла. Если у нас пустой список, то выводим сообщение об этом. Создаём переменную tmp, устанавливаем её на начало списка. Если первый элемент …","date":1715299200,"expirydate":-62135596800,"kind":"page","lang":"ru","lastmod":1715299200,"objectID":"541c59caad9f6539930df244faacfd92","permalink":"https://neve7mind.github.io/ru/project/project1_soft_eng_lab1/","publishdate":"2024-05-10T00:00:00Z","relpermalink":"/ru/project/project1_soft_eng_lab1/","section":"project","summary":"В данном проекте я на примере объясню, как работают односвязные списки в языке программирования C++","tags":["Deep Learning"],"title":"Реализация односвязных списков в C++","type":"project"},{"authors":null,"categories":null,"content":"Hugo Blox Builder is designed to give technical content creators a seamless experience. You can focus on the content and Wowchemy handles the rest.\nHighlight your code snippets, take notes on math classes, and draw diagrams from textual representation.\nOn this page, you’ll find some examples of the types of technical content that can be rendered with Wowchemy.\nExamples Code Wowchemy supports a Markdown extension for highlighting code syntax. You can customize the styles under the syntax_highlighter option in your config/_default/params.yaml file.\n```python import pandas as pd data = pd.read_csv(\u0026#34;data.csv\u0026#34;) data.head() ``` renders as\nimport pandas as pd data = pd.read_csv(\u0026#34;data.csv\u0026#34;) data.head() Mindmaps Wowchemy supports a Markdown extension for mindmaps.\nSimply insert a Markdown markmap code block and optionally set the height of the mindmap as shown in the example below.\nA simple mindmap defined as a Markdown list:\n```markmap {height=\u0026#34;200px\u0026#34;} - Hugo Modules - wowchemy - blox-plugins-netlify - blox-plugins-netlify-cms - blox-plugins-reveal ``` renders as\n- Hugo Modules - wowchemy - blox-plugins-netlify - blox-plugins-netlify-cms - blox-plugins-reveal A more advanced mindmap with formatting, code blocks, and math:\n```markmap - Mindmaps - Links - [Wowchemy Docs](https://docs.hugoblox.com/) - [Discord Community](https://discord.gg/z8wNYzb) - [GitHub](https://github.com/HugoBlox/hugo-blox-builder) - Features - Markdown formatting - **inline** ~~text~~ *styles* - multiline text - `inline code` - ```js console.log(\u0026#39;hello\u0026#39;); console.log(\u0026#39;code block\u0026#39;); ``` - Math: $x = {-b \\pm \\sqrt{b^2-4ac} \\over 2a}$ ``` renders as\n- Mindmaps - Links - [Wowchemy Docs](https://docs.hugoblox.com/) - [Discord Community](https://discord.gg/z8wNYzb) - [GitHub](https://github.com/HugoBlox/hugo-blox-builder) - Features - Markdown formatting - **inline** ~~text~~ *styles* - multiline text - `inline code` - ```js console.log(\u0026#39;hello\u0026#39;); console.log(\u0026#39;code block\u0026#39;); ``` - Math: $x = {-b \\pm \\sqrt{b^2-4ac} \\over 2a}$ Charts Wowchemy supports the popular Plotly format for interactive charts.\nSave your Plotly JSON in your page folder, for example line-chart.json, and then add the {{\u0026lt; chart data=\u0026#34;line-chart\u0026#34; \u0026gt;}} shortcode where you would like the chart to appear.\nDemo:\nYou might also find the Plotly JSON Editor useful.\nMath Wowchemy supports a Markdown extension for $\\LaTeX$ math. You can enable this feature by toggling the math option in your config/_default/params.yaml file.\nTo render inline or block math, wrap your LaTeX math with {{\u0026lt; math \u0026gt;}}$...${{\u0026lt; /math \u0026gt;}} or {{\u0026lt; math \u0026gt;}}$$...$${{\u0026lt; /math \u0026gt;}}, respectively. (We wrap the LaTeX math in the Wowchemy math shortcode to prevent Hugo rendering our math as Markdown. The math shortcode is new in v5.5-dev.)\nExample math block:\n{{\u0026lt; math \u0026gt;}} $$ \\gamma_{n} = \\frac{ \\left | \\left (\\mathbf x_{n} - \\mathbf x_{n-1} \\right )^T \\left [\\nabla F (\\mathbf x_{n}) - \\nabla F (\\mathbf x_{n-1}) \\right ] \\right |}{\\left \\|\\nabla F(\\mathbf{x}_{n}) - \\nabla F(\\mathbf{x}_{n-1}) \\right \\|^2} $$ {{\u0026lt; /math \u0026gt;}} renders as\n$$\\gamma_{n} = \\frac{ \\left | \\left (\\mathbf x_{n} - \\mathbf x_{n-1} \\right )^T \\left [\\nabla F (\\mathbf x_{n}) - \\nabla F (\\mathbf x_{n-1}) \\right ] \\right |}{\\left \\|\\nabla F(\\mathbf{x}_{n}) - \\nabla F(\\mathbf{x}_{n-1}) \\right \\|^2}$$ Example inline math {{\u0026lt; math \u0026gt;}}$\\nabla F(\\mathbf{x}_{n})${{\u0026lt; /math \u0026gt;}} renders as $\\nabla F(\\mathbf{x}_{n})$.\nExample multi-line math using the math linebreak (\\\\):\n{{\u0026lt; math \u0026gt;}} $$f(k;p_{0}^{*}) = \\begin{cases}p_{0}^{*} \u0026amp; \\text{if }k=1, \\\\ 1-p_{0}^{*} \u0026amp; \\text{if }k=0.\\end{cases}$$ {{\u0026lt; /math \u0026gt;}} renders as\n$$ f(k;p_{0}^{*}) = \\begin{cases}p_{0}^{*} \u0026amp; \\text{if }k=1, \\\\ 1-p_{0}^{*} \u0026amp; \\text{if }k=0.\\end{cases} $$ Diagrams Wowchemy supports a Markdown extension for diagrams. You can enable this feature by toggling the diagram option in your config/_default/params.toml file or by adding diagram: true to your page front matter.\nAn example flowchart:\n```mermaid graph TD A[Hard] --\u0026gt;|Text| B(Round) B --\u0026gt; C{Decision} C --\u0026gt;|One| D[Result 1] C --\u0026gt;|Two| E[Result 2] ``` renders as\ngraph TD A[Hard] --\u0026gt;|Text| B(Round) B --\u0026gt; C{Decision} C --\u0026gt;|One| D[Result 1] C --\u0026gt;|Two| E[Result 2] An example sequence diagram:\n```mermaid sequenceDiagram Alice-\u0026gt;\u0026gt;John: Hello John, how are you? loop Healthcheck John-\u0026gt;\u0026gt;John: Fight against hypochondria end Note right of John: Rational thoughts! John--\u0026gt;\u0026gt;Alice: Great! John-\u0026gt;\u0026gt;Bob: How about you? Bob--\u0026gt;\u0026gt;John: Jolly good! ``` renders as\nsequenceDiagram Alice-\u0026gt;\u0026gt;John: Hello John, how are you? loop Healthcheck John-\u0026gt;\u0026gt;John: Fight against hypochondria end Note right of John: Rational thoughts! John--\u0026gt;\u0026gt;Alice: Great! John-\u0026gt;\u0026gt;Bob: How about you? Bob--\u0026gt;\u0026gt;John: Jolly good! An example Gantt diagram:\n```mermaid gantt section Section Completed :done, des1, 2014-01-06,2014-01-08 Active :active, des2, 2014-01-07, 3d Parallel 1 : des3, after des1, 1d Parallel 2 : des4, after des1, 1d Parallel 3 : des5, after des3, 1d Parallel 4 : des6, after des4, 1d ``` renders as\ngantt section …","date":1711670400,"expirydate":-62135596800,"kind":"page","lang":"ru","lastmod":1711670400,"objectID":"4044730c40573330b7db3feec18bcd39","permalink":"https://neve7mind.github.io/ru/post/post4_markdown/","publishdate":"2024-03-29T00:00:00Z","relpermalink":"/ru/post/post4_markdown/","section":"post","summary":"Hugo Blox Builder is designed to give technical content creators a seamless experience. You can focus on the content and Wowchemy handles the rest.\nHighlight your code snippets, take notes on math classes, and draw diagrams from textual representation.","tags":null,"title":"Язык разметки Markdown","type":"post"},{"authors":["Мурашов И.В."],"categories":["Demo"],"content":"Понедельник - день тяжёлый С субботы я гостил у родителей. Подключился на онлайн лекции, но вместо того, чтобы отправиться спать, как сделал бы каждый добропорядочный студент, проявил инициативу высшего уровня и презентовал доклад о процессах в операционных системах.\nДнём я возвращался в Москву. Больше пригородной электрички я ненавижу только 2 пригородные электрички. Запах фантомных фекалий, куда бы не сел, провинциалы, спорящие о том, какое пиво они откроют после следующей остановки, великое переселение зайцев в соседние вагоны, когда заходят кондукторы, агрессивные бабули, приватизировавшие 2 ряда и восхваляющие авторитарный режим, установившийся в стране (во времена Сталина, конечно). Чтобы как-то вынести подобные проявления вышеупомянутой массы, я надеваю наушники и это спасает… Но не надолго: через каждые 2 станции в начале вагона начинают появляться уездные коммерасанты с громкоговорителями, от которых, барабанные перепонки лопаются как воздушные шарики, запущенные у Кремля, а уши скручиваются в трубочку. Кажется, у них есть всё: дождевик, полотенце, плавки, сварочный аппарат, мороженое, наушники, пистолет Макарова и средства контрацепции (я думаю, самое нужное для вагонного контингента) - как говорится, всё: от батона до гондона, и всё это по сто рублей. По-моему, единственное, чего у них нет, - это ещё одного торгаша.\nВытерпев час в электричке и полчаса в автобусе, я оказываюсь дома, где перевожу дух и сажусь за домашние задания.\nВторник и Среда - дни тяжёлые Накануне вечером решив, что надо что-то менять в жизни, я встал в 6 утра, поспав рекордные за последнюю неделю 5 часов. С закрытыми глазами сделал кофе и лабу. Съездил на волейбол и вечером встретился с братом по ремеслу - другом-мазохистом программистом. Ночь напролет мы писали на java. После 1.5-часового сна приехал в университет, где умирал 2 пары подряд. Не выдержав, уехал домой отсыпаться, но поскольку дел много, а в сутках всего 24 часа (какой гений это придумал!?), дневной сон составил пару часов, после чего я делал дз.\nЧетверг - тоже день тяжёлый Съездил на пары, после которых преподавал математику своему ученику-садисту. Коротко о нём: тварь эта не обделена чувством юмора, а потому все 2 часа я был вскипающим чайником с красными глазами (от недосыпа!). Да-да, приходилось редактировать все задачки, в которых ответ хотя бы косвенно напоминал число 300. Вы себе просто не представляете, какой неописуемый восторг испытывало это прекрасное создание каждый раз, когда напоминало мне, что за убийство дают от 8 до 20 лет, ибо это единственное, что заставляло меня усидеть на месте после идиотских тезисов типа ‘2^{0,5} = 1’, “детей бить нельзя” и тому подобных.\nГероически пройдя через вышеперечисленные испытания, я измотанный лёг спать.\nПятница - вот и дожили Безмерно счастливый, так как осознаю, что рабочая неделя закончилась и начались рабочие выходные.\nВыводы Каюсь, грешен. Мог бы сделать гораздо больше, если бы грамотно распланировал своё время и восстановил режим. Но чтобы это сделать, надо сделать все лабы, а чтобы успеть сделать все лабы, надо найти на них время, а чтобы найти на них время, надо сделать все лабы, а чтобы сделать все лабы, надо…\nВсем мира и добра!\n","date":1710460800,"expirydate":-62135596800,"kind":"page","lang":"ru","lastmod":1710460800,"objectID":"d9a0b62a8071532953c37580186ec0e6","permalink":"https://neve7mind.github.io/ru/post/post1_last-week/","publishdate":"2024-03-15T00:00:00Z","relpermalink":"/ru/post/post1_last-week/","section":"post","summary":"Сейчас я расскажу, чем я занимался на этой неделе и проанализирую события.","tags":["Academic"],"title":"Как прошла моя неделя? x1","type":"post"},{"authors":["Мурашов И.В."],"categories":["Demo"],"content":"О системе контроля версий Система контроля версий — это система, записывающая изменения в файл или набор файлов в течение времени и позволяющая вернуться позже к определённой версии. Для контроля версий файлов в этой книге в качестве примера будет использоваться исходный код программного обеспечения, хотя на самом деле вы можете использовать контроль версий практически для любых типов файлов.\nЛокальные системы контроля версий Многие люди в качестве метода контроля версий применяют копирование файлов в отдельный каталог (возможно даже, каталог с отметкой по времени, если они достаточно сообразительны). Данный подход очень распространён из-за его простоты, однако он невероятно сильно подвержен появлению ошибок. Можно легко забыть в каком каталоге вы находитесь и случайно изменить не тот файл или скопировать не те файлы, которые вы хотели.\nДля того, чтобы решить эту проблему, программисты давным-давно разработали локальные VCS с простой базой данных, которая хранит записи о всех изменениях в файлах, осуществляя тем самым контроль ревизий.\nЦентрализованные системы контроля версий Следующая серьёзная проблема, с которой сталкиваются люди, — это необходимость взаимодействовать с другими разработчиками. Для того, чтобы разобраться с ней, были разработаны централизованные системы контроля версий (Centralized Version Control System, далее CVCS). Такие системы, как CVS, Subversion и Perforce, используют единственный сервер, содержащий все версии файлов, и некоторое количество клиентов, которые получают файлы из этого централизованного хранилища. Применение CVCS являлось стандартом на протяжении многих лет.\nТакой подход имеет множество преимуществ, особенно перед локальными VCS. Например, все разработчики проекта в определённой степени знают, чем занимается каждый из них. Администраторы имеют полный контроль над тем, кто и что может делать, и гораздо проще администрировать CVCS, чем оперировать локальными базами данных на каждом клиенте.\nНесмотря на это, данный подход тоже имеет серьёзные минусы. Самый очевидный минус — это единая точка отказа, представленная централизованным сервером. Если этот сервер выйдет из строя на час, то в течение этого времени никто не сможет использовать контроль версий для сохранения изменений, над которыми работает, а также никто не сможет обмениваться этими изменениями с другими разработчиками. Если жёсткий диск, на котором хранится центральная БД, повреждён, а своевременные бэкапы отсутствуют, вы потеряете всё — всю историю проекта, не считая единичных снимков репозитория, которые сохранились на локальных машинах разработчиков. Локальные VCS страдают от той же самой проблемы: когда вся история проекта хранится в одном месте, вы рискуете потерять всё.\nРаспределённые системы контроля версий Здесь в игру вступают распределённые системы контроля версий (Distributed Version Control System, далее DVCS). В DVCS (таких как Git, Mercurial, Bazaar или Darcs) клиенты не просто скачивают снимок всех файлов (состояние файлов на определённый момент времени) — они полностью копируют репозиторий. В этом случае, если один из серверов, через который разработчики обменивались данными, умрёт, любой клиентский репозиторий может быть скопирован на другой сервер для продолжения работы. Каждая копия репозитория является полным бэкапом всех данных.\nБолее того, многие DVCS могут одновременно взаимодействовать с несколькими удалёнными репозиториями, благодаря этому вы можете работать с различными группами людей, применяя различные подходы единовременно в рамках одного проекта. Это позволяет применять сразу несколько подходов в разработке, например, иерархические модели, что совершенно невозможно в централизованных системах.\n","date":1710460800,"expirydate":-62135596800,"kind":"page","lang":"ru","lastmod":1710460800,"objectID":"58d7550e5042cd731e56ca255aaf453a","permalink":"https://neve7mind.github.io/ru/post/post2_git/","publishdate":"2024-03-15T00:00:00Z","relpermalink":"/ru/post/post2_git/","section":"post","summary":"В данном посте я расскажу о системе контроля версий git.","tags":["Academic"],"title":"Управление версиями Git","type":"post"},{"authors":null,"categories":null,"content":"from IPython.core.display import Image Image(\u0026#39;https://www.python.org/static/community_logos/python-logo-master-v3-TM-flattened.png\u0026#39;) print(\u0026#34;Welcome to Academic!\u0026#34;) Welcome to Academic! Organize your notebooks Place the notebooks that you would like to publish in a notebooks folder at the root of your website.\nImport the notebooks into your site pipx install academic academic import \u0026#39;notebooks/**.ipynb\u0026#39; content/post/ --verbose The notebooks will be published to the folder you specify above. In this case, they will be published to your content/post/ folder.\n","date":1699056000,"expirydate":-62135596800,"kind":"page","lang":"ru","lastmod":1699056000,"objectID":"94fa5e486d3bf3e0941e2ff6e7126c06","permalink":"https://neve7mind.github.io/ru/post/blog-with-jupyter/","publishdate":"2023-11-04T00:00:00Z","relpermalink":"/ru/post/blog-with-jupyter/","section":"post","summary":"Easily blog from Jupyter notebooks!","tags":null,"title":"Blog with Jupyter Notebooks!","type":"post"},{"authors":["Мурашов И.В."],"categories":null,"content":" Create your slides in Markdown - click the Slides button to check out the example. Add the publication’s full text or supplementary notes here. You can use rich formatting such as including code, math, and images.\n","date":1554595200,"expirydate":-62135596800,"kind":"page","lang":"ru","lastmod":1554595200,"objectID":"557dc08fd4b672a0c08e0a8cf0c9ff7d","permalink":"https://neve7mind.github.io/ru/publication/preprint/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/ru/publication/preprint/","section":"publication","summary":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum.","tags":["Source Themes"],"title":"An example preprint / working paper","type":"publication"},{"authors":[],"categories":[],"content":"Create slides in Markdown with Hugo Blox Builder Hugo Blox Builder | Documentation\nFeatures Efficiently write slides in Markdown 3-in-1: Create, Present, and Publish your slides Supports speaker notes Mobile friendly slides Controls Next: Right Arrow or Space Previous: Left Arrow Start: Home Finish: End Overview: Esc Speaker notes: S Fullscreen: F Zoom: Alt + Click PDF Export Code Highlighting Inline code: variable\nCode block:\nporridge = \u0026#34;blueberry\u0026#34; if porridge == \u0026#34;blueberry\u0026#34;: print(\u0026#34;Eating...\u0026#34;) Math In-line math: $x + y = z$\nBlock math:\n$$ f\\left( x \\right) = ;\\frac{{2\\left( {x + 4} \\right)\\left( {x - 4} \\right)}}{{\\left( {x + 4} \\right)\\left( {x + 1} \\right)}} $$\nFragments Make content appear incrementally\n{{% fragment %}} One {{% /fragment %}} {{% fragment %}} **Two** {{% /fragment %}} {{% fragment %}} Three {{% /fragment %}} Press Space to play!\nOne Two Three A fragment can accept two optional parameters:\nclass: use a custom style (requires definition in custom CSS) weight: sets the order in which a fragment appears Speaker Notes Add speaker notes to your presentation\n{{% speaker_note %}} - Only the speaker can read these notes - Press `S` key to view {{% /speaker_note %}} Press the S key to view the speaker notes!\nOnly the speaker can read these notes Press S key to view Themes black: Black background, white text, blue links (default) white: White background, black text, blue links league: Gray background, white text, blue links beige: Beige background, dark text, brown links sky: Blue background, thin dark text, blue links night: Black background, thick white text, orange links serif: Cappuccino background, gray text, brown links simple: White background, black text, blue links solarized: Cream-colored background, dark green text, blue links Custom Slide Customize the slide style and background\n{{\u0026lt; slide background-image=\u0026#34;/media/boards.jpg\u0026#34; \u0026gt;}} {{\u0026lt; slide background-color=\u0026#34;#0000FF\u0026#34; \u0026gt;}} {{\u0026lt; slide class=\u0026#34;my-style\u0026#34; \u0026gt;}} Custom CSS Example Let’s make headers navy colored.\nCreate assets/css/reveal_custom.css with:\n.reveal section h1, .reveal section h2, .reveal section h3 { color: navy; } Questions? Ask\nDocumentation\n","date":1549324800,"expirydate":-62135596800,"kind":"page","lang":"ru","lastmod":1549324800,"objectID":"0e6de1a61aa83269ff13324f3167c1a9","permalink":"https://neve7mind.github.io/ru/slides/example/","publishdate":"2019-02-05T00:00:00Z","relpermalink":"/ru/slides/example/","section":"slides","summary":"An introduction to using Hugo Blox Builder's Slides feature.","tags":[],"title":"Slides","type":"slides"},{"authors":["Мурашов И.В.","Robert Ford"],"categories":null,"content":" Click the Cite button above to demo the feature to enable visitors to import publication metadata into their reference management software. Create your slides in Markdown - click the Slides button to check out the example. Add the publication’s full text or supplementary notes here. You can use rich formatting such as including code, math, and images.\n","date":1441065600,"expirydate":-62135596800,"kind":"page","lang":"ru","lastmod":1441065600,"objectID":"966884cc0d8ac9e31fab966c4534e973","permalink":"https://neve7mind.github.io/ru/publication/journal-article/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/ru/publication/journal-article/","section":"publication","summary":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum.","tags":["Source Themes"],"title":"An example journal article","type":"publication"},{"authors":["Мурашов И.В.","Robert Ford"],"categories":null,"content":" Click the Cite button above to demo the feature to enable visitors to import publication metadata into their reference management software. Create your slides in Markdown - click the Slides button to check out the example. Add the publication’s full text or supplementary notes here. You can use rich formatting such as including code, math, and images.\n","date":1372636800,"expirydate":-62135596800,"kind":"page","lang":"ru","lastmod":1372636800,"objectID":"69425fb10d4db090cfbd46854715582c","permalink":"https://neve7mind.github.io/ru/publication/conference-paper/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/ru/publication/conference-paper/","section":"publication","summary":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum.","tags":[],"title":"An example conference paper","type":"publication"}]